local Library = {}

-- Advanced service obfuscation
local function getService(name)
    local encoded = {}
    for i = 1, #name do
        encoded[i] = string.byte(name, i)
    end
    return game:GetService(string.char(table.unpack(encoded)))
end

-- Dynamic service caching with rotation
local serviceRotation = 0
local function rotateService(serviceName)
    serviceRotation = (serviceRotation + 1) % 3
    local services = {
        [0] = function() return game:FindService(serviceName) end,
        [1] = function() return game:GetService(serviceName) end,
        [2] = function() return game[serviceName] end
    }
    return services[serviceRotation]()
end

-- Memory-safe service access
local cachedServices = setmetatable({}, {
    __index = function(t, k)
        local service = pcall(function() return rotateService(k) end)
        if service then
            rawset(t, k, service)
            return service
        end
        return nil
    end,
    __metatable = "locked"
})

-- Ultra-stealth parent detection
local function findUltraStealthParent()
    local candidates = {}
    
    -- Test workspace camera (least monitored)
    pcall(function()
        local cam = workspace.CurrentCamera
        if cam then table.insert(candidates, cam) end
    end)
    
    -- Test PlayerGui with delay
    task.spawn(function()
        task.wait(math.random(100, 500) / 1000)
        pcall(function()
            local gui = game.Players.LocalPlayer:WaitForChild("PlayerGui")
            table.insert(candidates, gui)
        end)
    end)
    
    -- Test CoreGui last (most monitored)
    task.spawn(function()
        task.wait(math.random(200, 800) / 1000)
        pcall(function()
            local core = game:GetService("CoreGui")
            -- Create decoy first
            local decoy = Instance.new("ScreenGui")
            decoy.Name = "RobloxGui_" .. math.random(1000, 9999)
            decoy.Parent = core
            task.wait(0.1)
            decoy:Destroy()
            table.insert(candidates, core)
        end)
    end)
    
    return candidates[1] or game.Players.LocalPlayer:WaitForChild("PlayerGui")
end

-- Advanced name generation with multiple algorithms
local nameGenerators = {
    function() -- Roblox system names
        local names = {"StarterGui", "ReplicatedStorage", "Workspace", "Lighting", "SoundService"}
        return names[math.random(1, #names)] .. "_" .. math.random(100, 999)
    end,
    function() -- Random legitimate names
        local prefixes = {"UI", "Frame", "Main", "Core", "System"}
        local suffixes = {"Handler", "Manager", "Controller", "Service", "Module"}
        return prefixes[math.random(1, #prefixes)] .. suffixes[math.random(1, #suffixes)] .. math.random(10, 99)
    end,
    function() -- Hash-like names
        local chars = "abcdef0123456789"
        local name = ""
        for i = 1, 8 do
            name = name .. chars:sub(math.random(1, #chars), math.random(1, #chars))
        end
        return name
    end
}

local function generateStealthName()
    return nameGenerators[math.random(1, #nameGenerators)]()
end

-- Colors (more subtle)
local Colors = {
    Background = Color3.fromRGB(8, 8, 8),
    Secondary = Color3.fromRGB(12, 12, 12),
    Accent = Color3.fromRGB(16, 16, 16),
    Border = Color3.fromRGB(24, 24, 24),
    Text = Color3.fromRGB(220, 220, 220),
    TextDim = Color3.fromRGB(140, 140, 140),
    Primary = Color3.fromRGB(64, 120, 200),
    Success = Color3.fromRGB(60, 150, 60),
    Error = Color3.fromRGB(200, 60, 60),
    Hover = Color3.fromRGB(20, 20, 20)
}

-- Protected instance creation
local instancePool = {}
local function createProtectedInstance(className, properties)
    local instance
    
    -- Try from pool first
    for i, pooled in ipairs(instancePool) do
        if pooled.ClassName == className and not pooled.Parent then
            instance = pooled
            table.remove(instancePool, i)
            break
        end
    end
    
    -- Create new if needed
    if not instance then
        instance = Instance.new(className)
    end
    
    instance.Name = generateStealthName()
    
    -- Apply properties with protection
    if properties then
        for prop, value in pairs(properties) do
            pcall(function()
                instance[prop] = value
            end)
        end
    end
    
    -- Add fake attributes
    pcall(function()
        instance:SetAttribute("_rbx_internal", true)
        instance:SetAttribute("_created", tick())
        instance:SetAttribute("_id", math.random(10000, 99999))
    end)
    
    return instance
end

-- Ultra-stealth tween creation
local function createStealthTween(object, info, properties)
    return pcall(function()
        local tween = cachedServices.TweenService:Create(object, info, properties)
        task.spawn(function()
            tween:Play()
            tween.Completed:Wait()
            tween:Destroy()
        end)
        return tween
    end)
end

function Library:CreateWindow(options)
    options = options or {}
    local windowName = options.Name or "Cheat"
    
    local Window = {}
    Window.Tabs = {}
    Window.CurrentTab = nil
    Window.Destroyed = false
    
    -- Delayed creation to avoid detection
    task.wait(math.random(50, 200) / 1000)
    
    -- Create ScreenGui with maximum stealth
    local ScreenGui = createProtectedInstance("ScreenGui", {
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        ResetOnSpawn = false,
        IgnoreGuiInset = true,
        DisplayOrder = math.random(-10, 10)
    })
    
    -- Ultra-stealth parent assignment
    task.spawn(function()
        local parent = findUltraStealthParent()
        task.wait(math.random(100, 300) / 1000)
        ScreenGui.Parent = parent
    end)
    
    -- Main Frame (very small and subtle)
    local MainFrame = createProtectedInstance("Frame", {
        Size = UDim2.new(0, 420, 0, 300),
        Position = UDim2.new(0.5, -210, 0.5, -150),
        BackgroundColor3 = Colors.Background,
        BorderSizePixel = 0,
        Active = true,
        BackgroundTransparency = 0.05 -- Slightly transparent
    })
    MainFrame.Parent = ScreenGui
    
    -- Minimal styling
    local corner = createProtectedInstance("UICorner", {CornerRadius = UDim.new(0, 3)})
    corner.Parent = MainFrame
    
    local stroke = createProtectedInstance("UIStroke", {
        Color = Colors.Border,
        Thickness = 1,
        Transparency = 0.3
    })
    stroke.Parent = MainFrame
    
    -- Minimal title bar
    local TitleBar = createProtectedInstance("Frame", {
        Size = UDim2.new(1, 0, 0, 24),
        BackgroundColor3 = Colors.Secondary,
        BorderSizePixel = 0
    })
    TitleBar.Parent = MainFrame
    
    local titleCorner = createProtectedInstance("UICorner", {CornerRadius = UDim.new(0, 3)})
    titleCorner.Parent = TitleBar
    
    local TitleLabel = createProtectedInstance("TextLabel", {
        Size = UDim2.new(1, -8, 1, 0),
        Position = UDim2.new(0, 8, 0, 0),
        BackgroundTransparency = 1,
        Text = windowName,
        TextColor3 = Colors.Text,
        TextSize = 10,
        Font = Enum.Font.SourceSans,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    TitleLabel.Parent = TitleBar
    
    -- Compact tab container
    local TabContainer = createProtectedInstance("Frame", {
        Size = UDim2.new(0, 100, 1, -28),
        Position = UDim2.new(0, 4, 0, 28),
        BackgroundColor3 = Colors.Secondary,
        BorderSizePixel = 0
    })
    TabContainer.Parent = MainFrame
    
    local tabCorner = createProtectedInstance("UICorner", {CornerRadius = UDim.new(0, 2)})
    tabCorner.Parent = TabContainer
    
    local TabList = createProtectedInstance("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 1)
    })
    TabList.Parent = TabContainer
    
    local tabPadding = createProtectedInstance("UIPadding", {PaddingAll = UDim.new(0, 3)})
    tabPadding.Parent = TabContainer
    
    -- Content container
    local ContentContainer = createProtectedInstance("Frame", {
        Size = UDim2.new(1, -112, 1, -28),
        Position = UDim2.new(0, 108, 0, 28),
        BackgroundColor3 = Colors.Secondary,
        BorderSizePixel = 0
    })
    ContentContainer.Parent = MainFrame
    
    local contentCorner = createProtectedInstance("UICorner", {CornerRadius = UDim.new(0, 2)})
    contentCorner.Parent = ContentContainer
    
    -- Ultra-stealth dragging
    local dragging = false
    local dragStart, startPos
    
    TitleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = MainFrame.Position
        end
    end)
    
    -- Delayed input connections
    task.spawn(function()
        task.wait(math.random(200, 500) / 1000)
        
        cachedServices.UserInputService.InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                local delta = input.Position - dragStart
                MainFrame.Position = UDim2.new(
                    startPos.X.Scale, startPos.X.Offset + delta.X,
                    startPos.Y.Scale, startPos.Y.Offset + delta.Y
                )
            end
        end)
        
        cachedServices.UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = false
            end
        end)
    end)
    
    function Window:CreateTab(options)
        options = options or {}
        local tabName = options.Name or "Tab"
        
        local Tab = {}
        
        -- Minimal tab button
        local TabButton = createProtectedInstance("TextButton", {
            Size = UDim2.new(1, 0, 0, 20),
            BackgroundColor3 = Colors.Accent,
            BorderSizePixel = 0,
            Text = tabName,
            TextColor3 = Colors.TextDim,
            TextSize = 9,
            Font = Enum.Font.SourceSans
        })
        TabButton.Parent = TabContainer
        
        local btnCorner = createProtectedInstance("UICorner", {CornerRadius = UDim.new(0, 1)})
        btnCorner.Parent = TabButton
        
        -- Tab content
        local TabContent = createProtectedInstance("ScrollingFrame", {
            Size = UDim2.new(1, -6, 1, -6),
            Position = UDim2.new(0, 3, 0, 3),
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            ScrollBarThickness = 2,
            ScrollBarImageColor3 = Colors.Primary,
            CanvasSize = UDim2.new(0, 0, 0, 0),
            Visible = false
        })
        TabContent.Parent = ContentContainer
        
        local ContentList = createProtectedInstance("UIListLayout", {
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 2)
        })
        ContentList.Parent = TabContent
        
        local contentPadding = createProtectedInstance("UIPadding", {PaddingAll = UDim.new(0, 3)})
        contentPadding.Parent = TabContent
        
        ContentList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            TabContent.CanvasSize = UDim2.new(0, 0, 0, ContentList.AbsoluteContentSize.Y + 6)
        end)
        
        TabButton.MouseButton1Click:Connect(function()
            for _, tab in pairs(Window.Tabs) do
                tab.Content.Visible = false
                tab.Button.BackgroundColor3 = Colors.Accent
                tab.Button.TextColor3 = Colors.TextDim
            end
            
            TabContent.Visible = true
            TabButton.BackgroundColor3 = Colors.Primary
            TabButton.TextColor3 = Colors.Text
            Window.CurrentTab = Tab
        end)
        
        Tab.Button = TabButton
        Tab.Content = TabContent
        
        if #Window.Tabs == 0 then
            TabContent.Visible = true
            TabButton.BackgroundColor3 = Colors.Primary
            TabButton.TextColor3 = Colors.Text
            Window.CurrentTab = Tab
        end
        
        table.insert(Window.Tabs, Tab)
        
        function Tab:CreateToggle(options)
            options = options or {}
            local toggleText = options.Text or "Toggle"
            local defaultValue = options.Default or false
            local callback = options.Callback or function() end
            
            local ToggleFrame = createProtectedInstance("Frame", {
                Size = UDim2.new(1, 0, 0, 18),
                BackgroundColor3 = Colors.Accent,
                BorderSizePixel = 0
            })
            ToggleFrame.Parent = TabContent
            
            local frameCorner = createProtectedInstance("UICorner", {CornerRadius = UDim.new(0, 1)})
            frameCorner.Parent = ToggleFrame
            
            local ToggleButton = createProtectedInstance("TextButton", {
                Size = UDim2.new(1, -20, 1, 0),
                BackgroundTransparency = 1,
                Text = toggleText,
                TextColor3 = Colors.Text,
                TextSize = 9,
                Font = Enum.Font.SourceSans,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            ToggleButton.Parent = ToggleFrame
            
            local btnPadding = createProtectedInstance("UIPadding", {PaddingLeft = UDim.new(0, 4)})
            btnPadding.Parent = ToggleButton
            
            local ToggleIndicator = createProtectedInstance("Frame", {
                Size = UDim2.new(0, 10, 0, 10),
                Position = UDim2.new(1, -14, 0.5, -5),
                BackgroundColor3 = defaultValue and Colors.Success or Colors.Error,
                BorderSizePixel = 0
            })
            ToggleIndicator.Parent = ToggleFrame
            
            local indCorner = createProtectedInstance("UICorner", {CornerRadius = UDim.new(0, 1)})
            indCorner.Parent = ToggleIndicator
            
            local toggled = defaultValue
            
            ToggleButton.MouseButton1Click:Connect(function()
                task.spawn(function()
                    toggled = not toggled
                    local newColor = toggled and Colors.Success or Colors.Error
                    createStealthTween(ToggleIndicator, TweenInfo.new(0.15), {BackgroundColor3 = newColor})
                    pcall(callback, toggled)
                end)
            end)
            
            return ToggleButton
        end
        
        function Tab:CreateButton(options)
            options = options or {}
            local buttonText = options.Text or "Button"
            local callback = options.Callback or function() end
            
            local Button = createProtectedInstance("TextButton", {
                Size = UDim2.new(1, 0, 0, 18),
                BackgroundColor3 = Colors.Accent,
                BorderSizePixel = 0,
                Text = buttonText,
                TextColor3 = Colors.Text,
                TextSize = 9,
                Font = Enum.Font.SourceSans
            })
            Button.Parent = TabContent
            
            local btnCorner = createProtectedInstance("UICorner", {CornerRadius = UDim.new(0, 1)})
            btnCorner.Parent = Button
            
            Button.MouseButton1Click:Connect(function()
                task.spawn(function()
                    createStealthTween(Button, TweenInfo.new(0.1), {BackgroundColor3 = Colors.Primary})
                    task.wait(0.1)
                    createStealthTween(Button, TweenInfo.new(0.1), {BackgroundColor3 = Colors.Accent})
                    pcall(callback)
                end)
            end)
            
            return Button
        end
        
        return Tab
    end
    
    function Window:Destroy()
        if not Window.Destroyed then
            Window.Destroyed = true
            task.spawn(function()
                -- Gradual cleanup to avoid detection
                for _, tab in pairs(Window.Tabs) do
                    if tab.Content then
                        tab.Content:Destroy()
                    end
                    if tab.Button then
                        tab.Button:Destroy()
                    end
                    task.wait(0.01)
                end
                
                task.wait(0.1)
                if ScreenGui then
                    ScreenGui:Destroy()
                end
            end)
        end
    end
    
    return Window
end

-- Ultra-stealth cleanup
task.spawn(function()
    while task.wait(math.random(60, 120)) do
        pcall(function()
            -- Return unused instances to pool
            for _, instance in pairs(instancePool) do
                if not instance.Parent and #instancePool > 50 then
                    instance:Destroy()
                    table.remove(instancePool, _)
                end
            end
            collectgarbage("collect")
        end)
    end
end)

return Library
